import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:simple_social_media/data/models/pin_model.dart';

class PinRepository {
  late FirebaseAuth _auth;
  PinRepository() {
    _auth = FirebaseAuth.instance;
  }

  Future<void> uploadPin({
    required File pinImageFile,
    required String pinName,
    required String pinDescription,
  }) async {
    final currentUserId = await _getCurrentUserId();
    _uploadPinToFirebase(
      pinImageFile: pinImageFile,
      pinName: pinName,
      pinDescription: pinDescription,
      userId: currentUserId,
    );
  }

  //Uploads pin details and returns autogenerated document id for _uploadPinImage
  Future<void> _uploadPinToFirebase({
    required File pinImageFile,
    required String pinName,
    required String pinDescription,
    required String userId,
  }) async {
    final pinDocId = FirebaseFirestore.instance.collection('pins').doc().id;
    print('New documet id is' + pinDocId);
    final pinImageUrl = await _uploadPinImage(
      pinImageFile: pinImageFile,
      pinDocumentId: pinDocId,
    );
    await _uploadPinDetails(
      userId: userId,
      pinDocId: pinDocId,
      pinImageUrl: pinImageUrl,
      pinName: pinName,
      pinDescription: pinDescription,
    );
    await _attachPinIdToUser(
      userid: userId,
      pinDocId: pinDocId,
    );
  }

  //Uploads image to storage uder id returned by _uploadPinNameDetails and returns download link
  Future<String> _uploadPinImage({
    required File pinImageFile,
    required String pinDocumentId,
  }) async {
    final ref = FirebaseStorage.instance
        .ref()
        .child('postImages')
        .child(pinDocumentId + '_pin_picture' + '.jpg');
    await ref.putFile(pinImageFile);
    var pinImageUrl = await ref.getDownloadURL();
    return pinImageUrl;
  }

  Future<void> _uploadPinDetails({
    required String userId,
    required String pinDocId,
    required String pinImageUrl,
    required String pinName,
    required String pinDescription,
  }) async {
    return FirebaseFirestore.instance.collection('pins').doc(pinDocId).set({
      'userId': userId,
      'pinId': pinDocId,
      'pinImageUrl': pinImageUrl,
      'pinName': pinName,
      'pinDescription': pinDescription,
      'createdAt': DateTime.now().toString(),
    });
  }

  //Adds pinImage's Id to list of images published by current user
  Future<void> _attachPinIdToUser({
    required String userid,
    required String pinDocId,
  }) async {
    return FirebaseFirestore.instance.collection('users').doc(userid).update({
      'pinIds': FieldValue.arrayUnion([pinDocId])
    });
  }

  //Fetches pin under given id
  Future<PinModel> _fetchPin({required String pinDocId}) async {
    try {
      DocumentSnapshot pinSnapshot = await FirebaseFirestore.instance
          .collection('pins')
          .doc(pinDocId)
          .get();
      var pin = PinModel(
        userId: pinSnapshot.get('userId'),
        pinDocId: pinSnapshot.get('pinId'),
        pinImageUrl: pinSnapshot.get('pinImageUrl'),
        pinName: pinSnapshot.get('pinName'),
        pinDescription: pinSnapshot.get('pinDescription'),
        createdAt: pinSnapshot.get('createdAt'),
      );
      return pin;
    } catch (error) {
      throw error;
    }
  }

  //Fetches given list of pins and returns list of pinModels
  Future<List<PinModel>> fetchArrayOfPins(
      {required List<String> pinDocIds}) async {
    try {
      List<PinModel> pinModels = [];
      for (var pinDocId in pinDocIds) {
        var pinModel = await _fetchPin(pinDocId: pinDocId);
        pinModels.add(pinModel);
      }
      return pinModels;
    } catch (error) {
      throw error;
    }
  }

  //Fetches all pins in pins collection and returns list of pinModels
  //Have not used _fetchPin because using it would cost additional reading operations
  Future<List<PinModel>> fetchAllPins() async {
    try {
      List<PinModel> pinModels = [];
      var querySnapshot =
          await FirebaseFirestore.instance.collection('pins').get();
      var documents = querySnapshot.docs.map((doc) => doc.data());
      for (var element in documents) {
        pinModels.add(
          PinModel(
            userId: element['userId'],
            pinDocId: element['pinId'],
            pinImageUrl: element['pinImageUrl'],
            pinName: element['pinName'],
            pinDescription: element['pinDescription'],
            createdAt: element['createdAt'],
          ),
        );
      }
      return pinModels;
    } catch (error) {
      throw error;
    }
  }

  Future<String> _getCurrentUserId() async {
    return _auth.currentUser!.uid;
  }
}
